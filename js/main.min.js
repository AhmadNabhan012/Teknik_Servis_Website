document.addEventListener("DOMContentLoaded", () => {
  // Hamburger Menü
  const hamburger = document.querySelector(".hamburger")
  const navLinks = document.querySelector(".nav-links")
  const closeMenu = document.querySelector(".nav-links .close-menu")

  if (hamburger) {
    hamburger.addEventListener("click", () => {
      hamburger.classList.toggle("active")
      navLinks.classList.toggle("active")
      document.body.classList.toggle("no-scroll")
    })
  }

  // Mobil menü kapatma butonu
  if (closeMenu) {
    closeMenu.addEventListener("click", () => {
      hamburger.classList.remove("active")
      navLinks.classList.remove("active")
      document.body.classList.remove("no-scroll")
    })
  }

  // Dropdown Menü (Mobil)
  const dropdowns = document.querySelectorAll(".dropdown")

  dropdowns.forEach((dropdown) => {
    const link = dropdown.querySelector("a")

    link.addEventListener("click", (e) => {
      if (window.innerWidth <= 768) {
        e.preventDefault()
        dropdown.classList.toggle("active")
      }
    })

    link.addEventListener("keydown", (e) => {
      if (e.key === " " || e.key === "Enter") {
        e.preventDefault()
        dropdown.classList.toggle("active")
      }
    })
  })

  // SSS Accordion
  const faqItems = document.querySelectorAll(".faq-item")

  faqItems.forEach((item) => {
    const question = item.querySelector(".faq-question")

    question.addEventListener("click", () => {
      // Diğer açık olanları kapat
      faqItems.forEach((otherItem) => {
        if (otherItem !== item) {
          otherItem.classList.remove("active")
        }
      })

      // Tıklanan öğeyi aç/kapat
      item.classList.toggle("active")
    })

    question.addEventListener("keydown", (e) => {
      if (e.key === " " || e.key === "Enter") {
        e.preventDefault()

        faqItems.forEach((otherItem) => {
          if (otherItem !== item) {
            otherItem.classList.remove("active")
          }
        })

        item.classList.toggle("active")
      }
    })
  })

  // Sayfa yüklendiğinde ilk SSS öğesini aç
  if (faqItems.length > 0) {
    faqItems[0].classList.add("active")
  }

  // Smooth Scroll
  const scrollLinks = document.querySelectorAll('a[href^="#"]')

  scrollLinks.forEach((link) => {
    link.addEventListener("click", function (e) {
      const href = this.getAttribute("href")

      if (href !== "#") {
        e.preventDefault()
        const target = document.querySelector(href)

        if (target) {
          window.scrollTo({
            top: target.offsetTop - 80,
            behavior: "smooth",
          })
        }
      }
    })
  })

  // Services Scroll için dokunmatik kaydırma desteği
  const servicesScroll = document.querySelector(".services-scroll")
  if (servicesScroll) {
    let isDown = false
    let startX
    let scrollLeft

    servicesScroll.addEventListener("mousedown", (e) => {
      isDown = true
      servicesScroll.classList.add("active")
      startX = e.pageX - servicesScroll.offsetLeft
      scrollLeft = servicesScroll.scrollLeft
    })

    servicesScroll.addEventListener("mouseleave", () => {
      isDown = false
      servicesScroll.classList.remove("active")
    })

    servicesScroll.addEventListener("mouseup", () => {
      isDown = false
      servicesScroll.classList.remove("active")
    })

    servicesScroll.addEventListener("mousemove", (e) => {
      if (!isDown) return
      e.preventDefault()
      const x = e.pageX - servicesScroll.offsetLeft
      const walk = (x - startX) * 2 // Kaydırma hızı
      servicesScroll.scrollLeft = scrollLeft - walk
    })
  }

  // Team Slider için dokunmatik kaydırma desteği
  const teamSlider = document.querySelector(".team-slider")
  if (teamSlider) {
    let isDown = false
    let startX
    let scrollLeft

    teamSlider.addEventListener("mousedown", (e) => {
      isDown = true
      teamSlider.classList.add("active")
      startX = e.pageX - teamSlider.offsetLeft
      scrollLeft = teamSlider.scrollLeft
    })

    teamSlider.addEventListener("mouseleave", () => {
      isDown = false
      teamSlider.classList.remove("active")
    })

    teamSlider.addEventListener("mouseup", () => {
      isDown = false
      teamSlider.classList.remove("active")
    })

    teamSlider.addEventListener("mousemove", (e) => {
      if (!isDown) return
      e.preventDefault()
      const x = e.pageX - teamSlider.offsetLeft
      const walk = (x - startX) * 2 // Kaydırma hızı
      teamSlider.scrollLeft = scrollLeft - walk
    })
  }
})









// FAQ Toggle ve Makale Yükleme
document.addEventListener('DOMContentLoaded', function() {
  // FAQ Toggle işlevselliği
  const faqItems = document.querySelectorAll('.faq-item');
  
  faqItems.forEach(item => {
      const question = item.querySelector('.faq-question');
      
      question.addEventListener('click', () => {
          item.classList.toggle('active');
          
          // Diğer FAQ öğelerini kapat
          faqItems.forEach(otherItem => {
              if (otherItem !== item) {
                  otherItem.classList.remove('active');
              }
          });
      });
  });

  // Makale içeriğini yükle
  const currentPage = window.location.pathname.split('/').pop().replace('.html', '');
  loadMakaleContent(currentPage);
});

function loadMakaleContent(pageName) {
  // Makale dosyasının yolunu belirle - göreceli yol kullan
  const makalePath = `../makaleler/${pageName}-makale.html`;
  console.log("Makale yolu:", makalePath); // Debug için
  
  fetch(makalePath)
      .then(response => {
          console.log("Fetch yanıtı:", response.status); // Debug için
          if (!response.ok) {
              throw new Error(`Makale içeriği yüklenemedi (${response.status})`);
          }
          return response.text();
      })
      .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          
          // Makale içeriğini çıkar
          const contentContainer = document.getElementById('makale-content');
          if (!contentContainer) {
              console.error('makale-content ID\'li element bulunamadı');
              return;
          }
          
          contentContainer.innerHTML = '';
          
          // Body içindeki tüm içeriği al
          const bodyContent = doc.querySelector('body');
          
          if (bodyContent) {
              // Script etiketlerini kaldır
              const scripts = bodyContent.querySelectorAll('script');
              scripts.forEach(script => script.remove());
              
              // Tüm içeriği ekle
              const allContent = Array.from(bodyContent.children);
              
              // İçeriği filtrele ve düzenle
              const filteredContent = allContent.filter(element => {
                  // Sadece belirli etiketleri al
                  return ['P', 'H2', 'H3', 'H4', 'H5', 'H6', 'UL', 'OL', 'TABLE', 'IMG', 'DIV', 'SECTION'].includes(element.tagName);
              });
              
              // İçeriği ekle
              filteredContent.forEach(element => {
                  // Özel durum
                  if (element.classList && element.classList.contains('summary-section')) {
                      // Özet bölümünü ekle ve sınıfları koru
                      const summaryDiv = document.createElement('div');
                      summaryDiv.className = 'summary-section service-feature';
                      summaryDiv.innerHTML = element.innerHTML;
                      contentContainer.appendChild(summaryDiv);
                  } else if (element.classList && element.classList.contains('author-section')) {
                      // Yazar bölümünü ekle ve sınıfları koru
                      const authorDiv = document.createElement('div');
                      authorDiv.className = 'author-section service-feature';
                      authorDiv.innerHTML = element.innerHTML;
                      contentContainer.appendChild(authorDiv);
                  } else if (element.classList && element.classList.contains('references-section')) {
                      // Referanslar bölümünü ekle ve sınıfları koru
                      const referencesDiv = document.createElement('div');
                      referencesDiv.className = 'references-section service-feature';
                      referencesDiv.innerHTML = element.innerHTML;
                      contentContainer.appendChild(referencesDiv);
                  } else if (element.tagName === 'IMG') {
                      // Resimleri düzenle
                      const imgContainer = document.createElement('div');
                      imgContainer.className = 'service-image-container';
                      
                      const img = element.cloneNode(true);
                      img.classList.add('service-main-image');
                      img.setAttribute('loading', 'lazy');
                      
                      imgContainer.appendChild(img);
                      contentContainer.appendChild(imgContainer);
                  } else if (element.tagName === 'TABLE') {
                      // Tabloları düzenle
                      const tableContainer = document.createElement('div');
                      tableContainer.className = 'service-table-container';
                      
                      const table = element.cloneNode(true);
                      table.classList.add('service-table');
                      
                      tableContainer.appendChild(table);
                      contentContainer.appendChild(tableContainer);
                  } else if (element.tagName === 'UL' || element.tagName === 'OL') {
                      // Listeleri düzenle
                      const list = element.cloneNode(true);
                      list.classList.add('service-list');
                      
                      // Liste öğelerine ikon ekle
                      const listItems = list.querySelectorAll('li');
                      listItems.forEach(item => {
                          // Mevcut içeriği sakla
                          const content = item.innerHTML;
                          // İkon ekle
                          item.innerHTML = `<i class="fas fa-check" aria-hidden="true"></i> ${content}`;
                      });
                      
                      contentContainer.appendChild(list);
                  } else if (element.tagName.match(/^H[2-6]$/)) {
                      // Başlıkları düzenle
                      const level = parseInt(element.tagName.substring(1));
                      let newLevel = 3; // Varsayılan olarak h3
                      
                      if (level === 2) newLevel = 3;
                      else if (level === 3) newLevel = 4;
                      else if (level === 4) newLevel = 4;
                      else if (level >= 5) newLevel = 5;
                      
                      const heading = document.createElement(`h${newLevel}`);
                      heading.innerHTML = element.innerHTML;
                      heading.className = element.className;
                      
                      contentContainer.appendChild(heading);
                  } else {
                      // Diğer içerikleri ekle
                      contentContainer.appendChild(element.cloneNode(true));
                  }
              });
              
              // Linkleri düzelt
              fixLinks(contentContainer);
              console.log("Makale içeriği başarıyla yüklendi"); // Debug için
          } else {
              throw new Error('Makale içeriği bulunamadı');
          }
      })
      .catch(error => {
          console.error('Makale yükleme hatası:', error);
          const contentContainer = document.getElementById('makale-content');
          if (contentContainer) {
              contentContainer.innerHTML = `
                  <div class="error-message">
                      <p><i class="fas fa-exclamation-triangle"></i> Makale içeriği yüklenirken bir hata oluştu.</p>
                      <p>Hata detayı: ${error.message}</p>
                      <button onclick="loadMakaleContent('${pageName}')" class="btn btn-primary">Tekrar Dene</button>
                  </div>
              `;
          }
      });
}

function fixLinks(container) {
  // Tüm linkleri düzelt
  const links = container.querySelectorAll('a');
  links.forEach(link => {
      // Dış bağlantıları yeni sekmede aç
      if (link.getAttribute('href') && link.getAttribute('href').startsWith('http')) {
          link.setAttribute('target', '_blank');
          
          // rel="nofollow" olan linkleri koru, diğerlerine noopener noreferrer ekle
          if (link.getAttribute('rel') === 'nofollow') {
              link.setAttribute('rel', 'nofollow noopener noreferrer');
          } else {
              link.setAttribute('rel', 'noopener noreferrer');
          }
      }
  });
  
  // Tüm resimleri düzelt
  const images = container.querySelectorAll('img');
  images.forEach(img => {
      // Responsive sınıfı ekle
      img.classList.add('service-main-image');
      // Lazy loading ekle
      img.setAttribute('loading', 'lazy');
      // Alt etiketi yoksa ekle
      if (!img.hasAttribute('alt') || img.getAttribute('alt') === '') {
          img.setAttribute('alt', 'Teknik Servis Görseli');
      }
      
      // Genişlik ve yükseklik ekle
      if (!img.hasAttribute('width')) {
          img.setAttribute('width', '800');
      }
      if (!img.hasAttribute('height')) {
          img.setAttribute('height', '450');
      }
  });
}
